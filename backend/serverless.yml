service: lgtm-generator-backend

frameworkVersion: "2"
useDotenv: true

plugins:
  - serverless-dynamodb-local

custom:
  product: ${self:service}
  prefix: ${self:custom.product}-${self:provider.stage}
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      dbPath: ./data
      migrate: true

provider:
  name: aws
  profile: default
  region: us-east-1
  stage: ${opt:stage, "dev"}
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource:
            - Fn::Join:
                - ":"
                - - arn:aws:dynamodb
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - table/${self:custom.prefix}-*
        - Effect: Allow
          Action: s3:PutObject
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - ${self:custom.prefix}-images
                - /*
  ecr:
    images:
      appimage:
        path: ./
        file: ./containers/app/Dockerfile
  apiName: ${self:custom.prefix}
  environment:
    STAGE: ${self:provider.stage}
    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    GOOGLE_CUSTOM_SEARCH_ENGINE_ID: ${env:GOOGLE_CUSTOM_SEARCH_ENGINE_ID}
    NOTIFICATION_SLACK_ACCESS_TOKEN: ${env:NOTIFICATION_SLACK_ACCESS_TOKEN}

package:
  individually: true

functions:
  api:
    image:
      name: appimage
      entryPoint:
        - "/var/task/build/api"
    events:
      # health check
      - http:
          method: get
          path: /v1/h

      # images
      - http:
          method: options
          path: /v1/images
      - http:
          method: get
          path: /v1/images
          request:
            parameters:
              querystrings:
                q: true

      # lgtms
      - http:
          method: options
          path: /v1/lgtms
      - http:
          method: get
          path: /v1/lgtms
          request:
            parameters:
              querystrings:
                after: false
      - http:
          method: post
          path: /v1/lgtms
      # reports
      - http:
          method: options
          path: /v1/reports
      - http:
          method: post
          path: /v1/reports

resources:
  Resources:
    LgtmsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-lgtms
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_status
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-reports
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
