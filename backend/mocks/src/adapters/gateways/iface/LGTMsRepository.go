// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entities "github.com/koki-develop/lgtm-generator/backend/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// LGTMsRepository is an autogenerated mock type for the LGTMsRepository type
type LGTMsRepository struct {
	mock.Mock
}

// CreateFromBase64 provides a mock function with given fields: base64, contentType
func (_m *LGTMsRepository) CreateFromBase64(base64 string, contentType string) (*entities.LGTM, error) {
	ret := _m.Called(base64, contentType)

	var r0 *entities.LGTM
	if rf, ok := ret.Get(0).(func(string, string) *entities.LGTM); ok {
		r0 = rf(base64, contentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.LGTM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(base64, contentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFromURL provides a mock function with given fields: url
func (_m *LGTMsRepository) CreateFromURL(url string) (*entities.LGTM, error) {
	ret := _m.Called(url)

	var r0 *entities.LGTM
	if rf, ok := ret.Get(0).(func(string) *entities.LGTM); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.LGTM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *LGTMsRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *LGTMsRepository) Find(id string) (*entities.LGTM, error) {
	ret := _m.Called(id)

	var r0 *entities.LGTM
	if rf, ok := ret.Get(0).(func(string) *entities.LGTM); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.LGTM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: limit
func (_m *LGTMsRepository) FindAll(limit int64) (entities.LGTMs, error) {
	ret := _m.Called(limit)

	var r0 entities.LGTMs
	if rf, ok := ret.Get(0).(func(int64) entities.LGTMs); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.LGTMs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllAfter provides a mock function with given fields: id, limit
func (_m *LGTMsRepository) FindAllAfter(id string, limit int64) (entities.LGTMs, error) {
	ret := _m.Called(id, limit)

	var r0 entities.LGTMs
	if rf, ok := ret.Get(0).(func(string, int64) entities.LGTMs); ok {
		r0 = rf(id, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.LGTMs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(id, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRandomly provides a mock function with given fields: limit
func (_m *LGTMsRepository) FindRandomly(limit int64) (entities.LGTMs, error) {
	ret := _m.Called(limit)

	var r0 entities.LGTMs
	if rf, ok := ret.Get(0).(func(int64) entities.LGTMs); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.LGTMs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
