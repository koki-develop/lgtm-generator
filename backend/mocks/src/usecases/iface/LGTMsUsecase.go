// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entities "github.com/koki-develop/lgtm-generator/backend/src/entities"

	mock "github.com/stretchr/testify/mock"
)

// LGTMsUsecase is an autogenerated mock type for the LGTMsUsecase type
type LGTMsUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ipt
func (_m *LGTMsUsecase) Create(ipt *entities.LGTMCreateInput) (*entities.LGTM, error) {
	ret := _m.Called(ipt)

	var r0 *entities.LGTM
	if rf, ok := ret.Get(0).(func(*entities.LGTMCreateInput) *entities.LGTM); ok {
		r0 = rf(ipt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.LGTM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.LGTMCreateInput) error); ok {
		r1 = rf(ipt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ipt
func (_m *LGTMsUsecase) Delete(ipt *entities.LGTMDeleteInput) error {
	ret := _m.Called(ipt)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.LGTMDeleteInput) error); ok {
		r0 = rf(ipt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ipt
func (_m *LGTMsUsecase) FindAll(ipt *entities.LGTMsFindAllInput) (entities.LGTMs, error) {
	ret := _m.Called(ipt)

	var r0 entities.LGTMs
	if rf, ok := ret.Get(0).(func(*entities.LGTMsFindAllInput) entities.LGTMs); ok {
		r0 = rf(ipt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entities.LGTMs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.LGTMsFindAllInput) error); ok {
		r1 = rf(ipt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
