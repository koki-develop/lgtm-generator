// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// Abort provides a mock function with given fields:
func (_m *Context) Abort() {
	_m.Called()
}

// GetRequest provides a mock function with given fields:
func (_m *Context) GetRequest() *http.Request {
	ret := _m.Called()

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	return r0
}

// Header provides a mock function with given fields: key, value
func (_m *Context) Header(key string, value string) {
	_m.Called(key, value)
}

// JSON provides a mock function with given fields: code, obj
func (_m *Context) JSON(code int, obj interface{}) {
	_m.Called(code, obj)
}

// Next provides a mock function with given fields:
func (_m *Context) Next() {
	_m.Called()
}

// ShouldBindJSON provides a mock function with given fields: obj
func (_m *Context) ShouldBindJSON(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShouldBindQuery provides a mock function with given fields: obj
func (_m *Context) ShouldBindQuery(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields: code
func (_m *Context) Status(code int) {
	_m.Called(code)
}
