// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	iface "github.com/koki-develop/lgtm-generator/backend/src/infrastructures/iface"
	mock "github.com/stretchr/testify/mock"
)

// DynamoDBTable is an autogenerated mock type for the DynamoDBTable type
type DynamoDBTable struct {
	mock.Mock
}

// Delete provides a mock function with given fields: hashKey, value
func (_m *DynamoDBTable) Delete(hashKey string, value interface{}) iface.DynamoDBDelete {
	ret := _m.Called(hashKey, value)

	var r0 iface.DynamoDBDelete
	if rf, ok := ret.Get(0).(func(string, interface{}) iface.DynamoDBDelete); ok {
		r0 = rf(hashKey, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.DynamoDBDelete)
		}
	}

	return r0
}

// Get provides a mock function with given fields: name, value
func (_m *DynamoDBTable) Get(name string, value interface{}) iface.DynamoDBQuery {
	ret := _m.Called(name, value)

	var r0 iface.DynamoDBQuery
	if rf, ok := ret.Get(0).(func(string, interface{}) iface.DynamoDBQuery); ok {
		r0 = rf(name, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.DynamoDBQuery)
		}
	}

	return r0
}

// Put provides a mock function with given fields: item
func (_m *DynamoDBTable) Put(item interface{}) iface.DynamoDBPut {
	ret := _m.Called(item)

	var r0 iface.DynamoDBPut
	if rf, ok := ret.Get(0).(func(interface{}) iface.DynamoDBPut); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.DynamoDBPut)
		}
	}

	return r0
}

// Update provides a mock function with given fields: hashKey, value
func (_m *DynamoDBTable) Update(hashKey string, value interface{}) iface.DynamoDBUpdate {
	ret := _m.Called(hashKey, value)

	var r0 iface.DynamoDBUpdate
	if rf, ok := ret.Get(0).(func(string, interface{}) iface.DynamoDBUpdate); ok {
		r0 = rf(hashKey, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iface.DynamoDBUpdate)
		}
	}

	return r0
}
