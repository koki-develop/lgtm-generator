version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  go: circleci/go@1.7.1
  node: circleci/node@5.0.2
  slack: circleci/slack@4.10.1
  terraform: circleci/terraform@3.1.0

executors:
  ubuntu:
    machine:
      image: ubuntu-2004:current
  golang:
    docker:
      - image: golang:1.19
  node:
    docker:
      - image: node:16
  cypress:
    docker:
      - image: cypress/base:17.8.0

commands:
  aws-configure:
    steps:
      - aws-cli/assume-role-with-web-identity:
          role-arn: ${AWS_IAM_ROLE_ARN}

  install-golang:
    steps:
      - go/install:
          version: '1.19'

  go-test:
    steps:
      - go/mod-download-cached
      - run:
          name: test
          command: go test ./...

  install-node:
    steps:
      - node/install:
          install-yarn: true
          node-version: '14'

  yarn-install:
    steps:
      - node/install-packages:
          pkg-manager: yarn

  install-terraform:
    steps:
      - terraform/install:
          terraform_version: 1.2.3

  install-tflint:
    steps:
      - run:
          name: install tflint
          command: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - run: tflint --init

  install-tfsec:
    steps:
      - run:
          name: install tfsec
          command: go install github.com/aquasecurity/tfsec/cmd/tfsec@latest

  notify-fail:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify-deployed:
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

jobs:
  backend-build:
    executor: golang
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install imagemagick
          command: |
            apt update
            apt install -y imagemagick libmagickwand-dev
      - go-test
      - notify-fail

  backend-deploy:
    executor: ubuntu
    working_directory: ~/project/backend
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-node
      - yarn-install
      - run:
          name: create .env
          command: |
            echo "SLACK_API_TOKEN=${NOTIFICATION_SLACK_ACCESS_TOKEN}"               >> .env
            echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}"                                 >> .env
            echo "GOOGLE_CUSTOM_SEARCH_ENGINE_ID=${GOOGLE_CUSTOM_SEARCH_ENGINE_ID}" >> .env
      - run:
          name: deploy
          command: yarn run deploy --stage << parameters.stage >>
      - notify-fail

  terraform-plan:
    executor: ubuntu
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-golang
      - install-terraform
      - terraform/plan:
          workspace: << parameters.stage >>
      - install-tflint
      - install-tfsec
      - run:
          name: tflint
          command: |
            tflint .
            tflint ./modules/aws
      - run: tfsec --config-file tfsec.yml
      - notify-fail

  terraform-apply:
    executor: ubuntu
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-terraform
      - terraform/apply:
          workspace: << parameters.stage >>
      - notify-fail
      - notify-deployed

  frontend-build:
    executor: node
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - yarn-install
      - run: yarn run lint
      - run: yarn run build
      - notify-fail

  e2e:
    executor: cypress
    working_directory: ~/project/e2e
    steps:
      - checkout:
          path: ~/project
      - yarn-install
      - run:
          name: install cypress
          command: yarn run cypress install
      - run:
          name: cypress
          command: yarn run cypress run --config-file cypress.dev.config.ts --record

workflows:
  build:
    jobs:
      # build
      - backend-build
      - terraform-plan:
          context: aws
          name: terraform-plan-dev
          stage: dev
      - terraform-plan:
          context: aws
          name: terraform-plan-prod
          stage: prod
      - frontend-build

      # e2e
      - approval-e2e:
          type: approval
          requires:
            - backend-build
            - terraform-plan-dev
            - terraform-plan-prod
            - frontend-build
      - slack/on-hold:
          requires:
            - backend-build
            - terraform-plan-dev
            - terraform-plan-prod
            - frontend-build
      - e2e:
          requires:
            - approval-e2e

      # approval
      - approval-deploy:
          type: approval
          requires:
            - backend-build
            - terraform-plan-dev
            - terraform-plan-prod
            - frontend-build
      - slack/on-hold:
          requires:
            - backend-build
            - terraform-plan-dev
            - terraform-plan-prod
            - frontend-build

      # deploy
      - backend-deploy:
          context: aws
          name: backend-deploy-dev
          stage: dev
          requires:
            - approval-deploy
          filters:
            branches:
              ignore:
                - main
      - terraform-apply:
          context: aws
          name: terraform-apply-dev
          stage: dev
          requires:
            - backend-deploy-dev
          filters:
            branches:
              ignore:
                - main

      - backend-deploy:
          context: aws
          name: backend-deploy-prod
          stage: prod
          requires:
            - approval-deploy
          filters:
            branches:
              only:
                - main
      - terraform-apply:
          context: aws
          name: terraform-apply-prod
          stage: prod
          requires:
            - backend-deploy-prod
          filters:
            branches:
              only:
                - main
