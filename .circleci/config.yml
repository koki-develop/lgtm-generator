version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  go: circleci/go@1.7.1
  node: circleci/node@5.0.2
  slack: circleci/slack@4.4.2
  terraform: circleci/terraform@3.1.0
  jq: circleci/jq@2.2.0

executors:
  ubuntu:
    machine:
      image: ubuntu-2004:current
  golang:
    docker:
      - image: golang:1.18
  node:
    docker:
      - image: node:14

commands:
  aws-configure:
    steps:
      - aws-cli/assume-role-with-web-identity:
          role-arn: ${AWS_IAM_ROLE_ARN}

  go-test:
    steps:
      - go/mod-download-cached
      - run:
          name: test
          command: go test ./...

  install-node:
    steps:
      - node/install:
          install-yarn: true
          node-version: '14'

  yarn-install:
    steps:
      - node/install-packages:
          pkg-manager: yarn

  install-terraform:
    steps:
      - terraform/install:
          terraform_version: 1.2.3

  notify:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  backend_build:
    executor: golang
    working_directory: ~/project/backend
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install imagemagick
          command: |
            apt update
            apt install -y imagemagick libmagickwand-dev
      - go-test
      - notify

  backend_deploy:
    executor: ubuntu
    working_directory: ~/project/backend
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-node
      - yarn-install
      - run:
          name: create .env
          command: |
            echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}"                                   >> .env
            echo "GOOGLE_CUSTOM_SEARCH_ENGINE_ID=${GOOGLE_CUSTOM_SEARCH_ENGINE_ID}"   >> .env
            echo "NOTIFICATION_SLACK_ACCESS_TOKEN=${NOTIFICATION_SLACK_ACCESS_TOKEN}" >> .env
      - run:
          name: deploy
          command: yarn run deploy --stage << parameters.stage >>
      - notify

  terraform_plan:
    executor: ubuntu
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-terraform
      - terraform/init
      - terraform/plan:
          workspace: << parameters.stage >>
      - notify

  terraform_apply:
    executor: ubuntu
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - aws-configure
      - install-terraform
      - terraform/init
      - terraform/apply:
          workspace: << parameters.stage >>
      - notify

  frontend_build:
    executor: node
    working_directory: ~/project/frontend
    steps:
      - checkout:
          path: ~/project
      - yarn-install
      - run: yarn run lint
      - run: yarn run build
      - notify

workflows:
  build:
    jobs:
      # build
      - backend_build
      - terraform_plan:
          context: aws
          name: terraform_plan_dev
          stage: dev
      - terraform_plan:
          context: aws
          name: terraform_plan_prod
          stage: prod
      - frontend_build

      # approval
      - approval_deploy:
          type: approval
          requires:
            - backend_build
            - terraform_plan_dev
            - terraform_plan_prod
            - frontend_build
      - slack/on-hold:
          requires:
            - backend_build
            - terraform_plan_dev
            - terraform_plan_prod
            - frontend_build

      # deploy
      - backend_deploy:
          context: aws
          name: backend_deploy_dev
          stage: dev
          requires:
            - approval_deploy
          filters:
            branches:
              ignore:
                - main
      - terraform_apply:
          context: aws
          name: terraform_apply_dev
          stage: dev
          requires:
            - backend_deploy_dev
          filters:
            branches:
              ignore:
                - main

      - backend_deploy:
          context: aws
          name: backend_deploy_prod
          stage: prod
          requires:
            - approval_deploy
          filters:
            branches:
              only:
                - main
      - terraform_apply:
          context: aws
          name: terraform_apply_prod
          stage: prod
          requires:
            - backend_deploy_prod
          filters:
            branches:
              only:
                - main
