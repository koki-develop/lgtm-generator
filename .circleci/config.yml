version: 2.1

orbs:
  docker: circleci/docker@1.6.0
  jq: circleci/jq@2.2.0
  slack: circleci/slack@4.4.2
  aws-cli: circleci/aws-cli@3.1.1

executors:
  terraform:
    docker:
      - image: hashicorp/terraform:1.2.3

commands:
  aws_setup:
    steps:
      - aws-cli/assume-role-with-web-identity:
          role-arn: ${AWS_IAM_ROLE_ARN}

  go_mod_download:
    steps:
      - restore_cache:
          key: go-mod-v2-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: go mod download
          command: go mod download -x
      - save_cache:
          key: go-mod-v2-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod

  yarn_install:
    steps:
      - restore_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install --check-files
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

  notify_status:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  backend_build:
    working_directory: ~/project/backend
    docker:
      - image: golang:1.18
    steps:
      - checkout:
          path: ~/project
      - jq/install
      - run:
          name: install imagemagick
          command: |
            apt update
            apt install -y imagemagick libmagickwand-dev
      - go_mod_download
      - restore_cache:
          keys:
            - go-build-v3-{{ .Branch }}
      - run:
          name: test
          command: go test ./src/...
      - save_cache:
          key: go-build-v3-{{ .Branch }}
          paths:
            - /root/.cache/go-build
      - notify_status

  backend_deploy:
    working_directory: ~/project/backend
    docker:
      - image: node:14
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - jq/install
      - aws_setup
      - docker/install-docker:
          version: v20.10.14
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.14
      - yarn_install
      - run:
          name: create .env
          command: |
            echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}"                                 >> .env
            echo "GOOGLE_CUSTOM_SEARCH_ENGINE_ID=${GOOGLE_CUSTOM_SEARCH_ENGINE_ID}" >> .env
            echo "NOTIFICATION_SLACK_ACCESS_TOKEN=${NOTIFICATION_SLACK_ACCESS_TOKEN}"                     >> .env
      - run:
          name: deploy
          command: yarn run deploy --stage << parameters.stage >>
      - notify_status

  terraform_plan:
    executor: terraform
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install required commands
          command: |
            apk --update add jq curl
      - aws_setup
      - run:
          name: terraform plan
          command: |
            terraform init
            terraform workspace select << parameters.stage >>
            terraform plan
      - notify_status

  terraform_apply:
    executor: terraform
    working_directory: ~/project/terraform/app
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install required commands
          command: |
            apk --update add jq curl
      - aws_setup
      - run:
          name: terraform apply
          command: |
            terraform init
            terraform workspace select << parameters.stage >>
            terraform apply -auto-approve
      - notify_status

  frontend_build:
    working_directory: ~/project/frontend
    docker:
      - image: node:14
    steps:
      - checkout:
          path: ~/project
      - yarn_install
      - run:
          name: lint
          command: yarn run lint
      - restore_cache:
          key: next-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: build
          command: yarn run build
      - save_cache:
          key: next-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - .next/cache
      - notify_status

workflows:
  build:
    jobs:
      # build
      - backend_build
      - terraform_plan:
          name: terraform_plan_dev
          stage: dev
      - terraform_plan:
          name: terraform_plan_prod
          stage: prod
      - frontend_build

      # approval
      - approval_deploy:
          type: approval
          requires:
            - backend_build
            - terraform_plan_dev
            - terraform_plan_prod
            - frontend_build
      - slack/on-hold:
          requires:
            - backend_build
            - terraform_plan_dev
            - terraform_plan_prod
            - frontend_build

      # deploy
      - backend_deploy:
          name: backend_deploy_dev
          stage: dev
          requires:
            - approval_deploy
          filters:
            branches:
              ignore:
                - main
      - terraform_apply:
          name: terraform_apply_dev
          stage: dev
          requires:
            - backend_deploy_dev
          filters:
            branches:
              ignore:
                - main

      - backend_deploy:
          name: backend_deploy_prod
          stage: prod
          requires:
            - approval_deploy
          filters:
            branches:
              only:
                - main
      - terraform_apply:
          name: terraform_apply_prod
          stage: prod
          requires:
            - backend_deploy_prod
          filters:
            branches:
              only:
                - main
