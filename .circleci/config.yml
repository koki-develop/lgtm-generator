version: 2.1

orbs:
  docker: circleci/docker@1.6.0
  slack: circleci/slack@4.4.2

commands:
  aws_setup:
    steps:
      - run:
          name: create aws/credentials aws/config
          command: |
            mkdir -p ~/.aws
            echo '[default]'                                       > ~/.aws/credentials
            echo "aws_access_key_id=${AWS_ACCESS_KEY_ID}"         >> ~/.aws/credentials
            echo "aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            echo '[default]'                                       > ~/.aws/config
            echo "region = us-east-1"                             >> ~/.aws/config

  terraform:
    parameters:
      path:
        type: string
      command:
        type: string
    steps:
      - run:
          name: terraform << parameters.command >> at << parameters.path >>
          command: |
            cd << parameters.path >>
            terraform << parameters.command >>

  go_mod_download:
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
      - run:
          name: go mod download
          command: go mod download -x
      - save_cache:
          paths:
            - /go/pkg/mod
          key: go-mod-v1-{{ .Branch }}-{{ checksum "go.sum" }}
  yarn_install:
    steps:
      - restore_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run: yarn install --check-files
      - save_cache:
          key: node-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
  notify_status:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

jobs:
  backend_build:
    working_directory: ~/project/backend
    docker:
      - image: lambci/lambda:build-go1.x
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install required commands
          command: |
            yum -y update
            yum -y install jq
      - go_mod_download
      - run:
          name: test
          command: go test ./src/...
      - notify_status

  backend_deploy:
    working_directory: ~/project/backend
    docker:
      - image: node:14
    parameters:
      stage:
        type: string
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install required commands
          command: |
            yum -y update
            yum -y install jq
      - aws_setup
      - docker/install-docker:
          version: v19.03.14
      - setup_remote_docker:
          version: 19.03.14
      - yarn_install
      - run:
          name: create secrets.yml
          command: |
            echo "googleApiKey: ${GOOGLE_API_KEY}"                               >> secrets.yml
            echo "googleCustomSearchEngineId: ${GOOGLE_CUSTOM_SEARCH_ENGINE_ID}" >> secrets.yml
            echo "slackAccessToken: ${APP_SLACK_ACCESS_TOKEN}"                   >> secrets.yml
      - run:
          name: deploy
          command: yarn run deploy --stage << parameters.stage >>
      - notify_status

  backend_terraform_plan:
    working_directory: ~/project/backend
    parameters:
      stage:
        type: string
    docker:
      - image: hashicorp/terraform:1.0.4
    steps:
      - checkout:
          path: ~/project
      - run:
          name: install required commands
          command: |
            apk --update add \
              jq \
              curl
      - aws_setup
      - terraform:
          path: ./terraform/envs/<< parameters.stage >>
          command: init
      - terraform:
          path: ./terraform/envs/<< parameters.stage >>
          command: validate
      - terraform:
          path: ./terraform/envs/<< parameters.stage >>
          command: plan
      - notify_status

workflows:
  build:
    jobs:
      # build
      - backend_build
      - backend_terraform_plan:
          stage: dev

      # approval
      - approval_deploy_dev:
          type: approval
          requires:
            - backend_build
      - slack/on-hold:
          requires:
            - backend_build

      # deploy
      - backend_deploy:
          stage: dev
          requires: [approval_deploy_dev]
